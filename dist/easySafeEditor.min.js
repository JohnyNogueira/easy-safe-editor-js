//BlackDigital 2020
export function createElement(e) {
    return createElements(e)[0];
};

export function createElements(e) {
    let t = document.createElement("template");
    return t.innerHTML = e.trim(), t.content.childNodes;
};

export function removeHTML(e) {
    return e.replace(/(<([^>]+)>)/gi, "");
};

export function getOffsetLeft(e) {
    let t = 0;
    do {
        isNaN(e.offsetLeft) || (t += e.offsetLeft);
    } while (e = e.offsetParent);
    return t;
};

export function getOffsetTop(e) {
    let t = 0;
    do {
        isNaN(e.offsetTop) || (t += e.offsetTop);
    } while (e = e.offsetParent);
    return t;
};

export class Editable {
    constructor(e, t) {
        this.type = t.getAttribute("data-type"), this.label = t.getAttribute("data-label"), 
        this.element = t, this.editor = e, this.element.addEventListener("focus", e => this.onElementFocus(e), !0);
    }
    onElementFocus(e) {
        this.editor.selectEditable(this);
    }
    getValue(e) {
        let t = this.element.innerHTML;
        return t = t.replace(/\s\s+/g, " "), e[this.label] = t, e;
    }
};

export class BaseTextEditable extends Editable {
    constructor(e, t) {
        super(e, t), this.startEditor();
    }
    startEditor() {
        this.element.setAttribute("contentEditable", !0);
    }
    removeEditor() {
        this.element.removeAttribute("contentEditable");
    }
};

export class ButtonEditable extends Editable {
    constructor(e, t) {
        super(e, t);
    }
};

export class ImageEditable extends Editable {
    constructor(e, t) {
        super(e, t);
    }
};

export class RichTextEditable extends BaseTextEditable {
    constructor(e, t) {
        super(e, t);
    }
};

export class TemplateEditable extends Editable {
    constructor(e, t) {
        super(e, t);
    }
};

export class TextEditable extends BaseTextEditable {
    constructor(e, t) {
        super(e, t), t.addEventListener("input", e => this.onInput(e), !0);
    }
    onInput(e) {
        let t = removeHTML(this.element.innerHTML);
        if (t != this.element.innerHTML) {
            let e = 0, i = null;
            if (window.getSelection && (i = window.getSelection()).getRangeAt) {
                let t = window.getSelection().getRangeAt(0), i = t.cloneRange();
                i.selectNodeContents(this.element), i.setEnd(t.endContainer, t.endOffset), e = i.toString().length;
            }
            this.element.innerHTML = t, e > 0 && i.setPosition(this.element.firstChild, e);
        }
    }
};

export class VideoEditable extends Editable {
    constructor(e, t) {
        super(e, t);
    }
};

export class EditableCore {
    constructor() {}
    static findByType(e) {
        return e in EditableCore.types ? EditableCore.types[e] : EditableCore.types.default;
    }
    static createEditable(e, t) {
        let i = t.getAttribute("data-type");
        return new (this.findByType(i))(e, t);
    }
};

EditableCore.types = {
    text: TextEditable,
    richText: RichTextEditable,
    video: VideoEditable,
    image: ImageEditable,
    button: ButtonEditable,
    template: TemplateEditable,
    default: Editable
};

export class FrameTools {
    constructor() {}
    create() {
        document.getElementsByTagName("body")[0].appendChild(createElement(FrameTools.toolsHTML)), 
        this.frameTool = document.getElementById("frameEdtitable"), this.pageTitle = document.getElementById("frameEdtitable_frameTitle"), 
        this.actionsDiv = document.getElementById("frameEdtitable_frameActions");
    }
    showActions(e) {
        while (this.actionsDiv.firstChild) this.actionsDiv.removeChild(this.actionsDiv.lastChild);
        void 0 != e && null != e ? (this.frameTool.style.visibility = "visible", this.frameTool.style.position = "absolute", 
        this.frameTool.style.left = getOffsetLeft(e.element) + "px", this.frameTool.style.top = getOffsetTop(e.element) - this.frameTool.offsetHeight + "px", 
        this.pageTitle.innerText = e.label) : (this.pageTitle.innerText = "", this.frameTool.style.visibility = "hidden");
    }
    remove() {
        this.panelTool.remove(), this.panelTool = null, this.pageTitle = null, this.editableContainers = null;
    }
};

FrameTools.toolsHTML = '\n<div id="frameEdtitable" style="visibility: hidden;">\n    <h6 id="frameEdtitable_frameTitle">Name</h6>\n    <div id="frameEdtitable_frameActions" class="frameActions">\n    </div>\n</div>';

export class ToolsPanel {
    constructor() {}
    create(e) {
        this.editor = e;
        let t = document.getElementsByTagName("body")[0], i = createElement(ToolsPanel.toolsHTML);
        t.insertBefore(i, t.firstChild), this.panelTool = document.getElementById("easySafeTools"), 
        this.pageTitle = document.getElementById("easySafeTools_PageTitle"), this.editableContainers = document.getElementById("easySafeTools_EditableContainers"), 
        this.collapseButton = document.getElementById("easySafeTools_collapsePanel"), this.collapseButton.addEventListener("click", e => this.onCollapseButtonClick(e), !0), 
        this.pageTitle.value = this.editor.title, this.pageTitle.addEventListener("input", e => this.onChangeTitle(e), !0);
    }
    remove() {
        this.panelTool.remove(), this.panelTool = null, this.pageTitle = null, this.editableContainers = null;
    }
    showTools() {
        this.panelTool.classList.remove("show"), this.panelTool.classList.add("hidden");
    }
    hiddenTools() {
        this.panelTool.classList.remove("hidden"), this.panelTool.classList.add("show");
    }
    toggleTools() {
        this.panelTool.classList.contains("show") ? this.showTools() : this.hiddenTools();
    }
    insertEditables(e) {
        for (let t in e) {
            let i = e[t], l = createElement(`<li><a href="#" title="${i.label}" data-index="${t}">${i.label}</a></li>`);
            l.firstChild.addEventListener("click", e => this.onSelectButtonClick(e), !0), this.editableContainers.appendChild(l);
        }
    }
    onSelectButtonClick(e) {
        let t = e.target.getAttribute("data-index"), i = this.editor.editables[t];
        i.element.scrollIntoView({
            block: "center"
        }), this.editor.selectEditable(i), e.preventDefault();
    }
    onCollapseButtonClick(e) {
        this.toggleTools(), e.preventDefault();
    }
    onChangeTitle(e) {
        this.editor.title = e.target.value, this.editor.titleElement.innerText = e.target.value;
    }
};

ToolsPanel.toolsHTML = '\n<div id="easySafeTools" class="menu-admin show">\n    <header class="header-admin"><div class="d-flex justify-content-between align-items-center flex-row">\n        <div class="recolher-menu d-flex align-items-center justify-content-center"">\n            <a id="easySafeTools_collapsePanel" href="#" title="Recolher Menu"><img src="images-admin/left.svg" alt="Recolher Menu"/></a>\n        </div>\n    </header>\n    <div class="title-admin d-flex align-items-center justify-content-center flex-row">\n        <div class="d-flex">\n            <h2>Voc\xea est\xe1 editando a p\xe1gina: <input id="easySafeTools_PageTitle" type="text" value="Sobre"></input> </h2>\n        </div>\n    </div>\n    <div class="content-itens">\n        <ul id="easySafeTools_EditableContainers"></ul>\n    </div>\n</div>';

var easySafeEditor = {
    tools: new ToolsPanel(),
    frameTools: new FrameTools(),
    editables: [],
    editableSelected: null,
    title: "",
    titleElement: null,
    init: function() {
        this.findTitle(), this.tools.create(this), this.frameTools.create(), this.findEditables(), 
        this.tools.insertEditables(this.editables);
    },
    findTitle: function() {
        let e = document.querySelectorAll("[data-title='true']");
        e.length > 0 ? (this.titleElement = e[0], this.title = e[0].innerText) : (console.log("No title!"), 
        this.titleElement = document.createTextNode(this.title));
    },
    findEditables: function() {
        let e = document.querySelectorAll("[data-edit='true']"), t = e.length;
        for (let i = 0; i < t; i++) {
            let t = e[i], l = EditableCore.createEditable(this, t);
            this.editables.push(l);
        }
    },
    selectEditable: function(e) {
        e.element.focus(), this.editableSelected != e && (this.editableSelected = e, this.frameTools.showActions(this.editableSelected));
    },
    saveValues: function() {
        let e = {};
        e.title = this.title;
        for (let t in this.editables) {
            e = this.editables[t].getValue(e);
        }
        console.log(e);
    }
};

export default easySafeEditor;